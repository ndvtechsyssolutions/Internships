# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1liPgePRMqAoByJmtq_giXthFhhnyiETu
"""

import json
from tabulate import tabulate

class Student:
    def __init__(self, student_id, name, branch, year, marks):
        self.student_id = student_id
        self.name = name
        self.branch = branch
        self.year = year
        self.marks = marks

    def to_dict(self):
        return {
            "student_id": self.student_id,
            "name": self.name,
            "branch": self.branch,
            "year": self.year,
            "marks": self.marks
        }

class Manager:
    def __init__(self, filename='students.json'):
        self.filename = filename
        self.students = self.load_students()

    def load_students(self):
        try:
            with open(self.filename, 'r') as f:
                return json.load(f)
        except FileNotFoundError:
            return []

    def save_students(self):
        with open(self.filename, 'w') as f:
            json.dump(self.students, f, indent=4)

    def add_student(self):
        student_id = input("Enter Student ID: ")
        if any(s['student_id'] == student_id for s in self.students):
            print("Student ID already exists.")
            return
        name = input("Enter Name: ")
        branch = input("Enter Branch: ")
        year = input("Enter Year: ")
        marks = float(input("Enter Marks: "))
        new_student = Student(student_id, name, branch, year, marks)
        self.students.append(new_student.to_dict())
        self.save_students()
        print("Student added successfully.")

    def view_students(self):
        if not self.students:
            print("No records found.")
            return
        print(tabulate(self.students, headers="keys", tablefmt="grid"))

    def update_student(self):
        student_id = input("Enter Student ID to update: ")
        for student in self.students:
            if student['student_id'] == student_id:
                student['name'] = input("Enter new name: ")
                student['branch'] = input("Enter new branch: ")
                student['year'] = input("Enter new year: ")
                student['marks'] = float(input("Enter new marks: "))
                self.save_students()
                print("Student updated successfully.")
                return
        print("Student not found.")

    def delete_student(self):
        student_id = input("Enter Student ID to delete: ")
        self.students = [s for s in self.students if s['student_id'] != student_id]
        self.save_students()
        print("Student deleted successfully.")

    def menu(self):
        while True:
            print("\n===== Student Record Management =====")
            print("1. Add Student")
            print("2. View All Students")
            print("3. Update Student")
            print("4. Delete Student")
            print("5. Exit")
            choice = input("Enter your choice: ")

            if choice == '1':
                self.add_student()
            elif choice == '2':
                self.view_students()
            elif choice == '3':
                self.update_student()
            elif choice == '4':
                self.delete_student()
            elif choice == '5':
                print("Exiting...")
                break
            else:
                print("Invalid choice. Try again.")

if __name__ == "__main__":
    manager = Manager()
    manager.menu()