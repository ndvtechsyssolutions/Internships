# -*- coding: utf-8 -*-
"""ASSIGNMENT6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tXH6ugmdIDyZtAPQ-PPju1lTquzAEW_c
"""

# Step 1: Mount your google drive
from google.colab import drive
drive.mount('/content/drive')

# Step 2: 📚 Import Libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Step 3:📁 Load Dataset
df = pd.read_csv('/content/drive/MyDrive/data_ndv/salary_data.csv')
print("Dataset Loaded Successfully!")
df.head()

df.tail()

#Step 4: 🔍 EDA & Statistical Summary
print("✅ Dataset Preview")
print(df.head())

print("\nℹ️ Info:")
print(df.info())

print("\n📊 Summary statistics:")
print(df.describe(include='all'))

# Step 5: Visualize the Dataset
plt.figure(figsize=(8,6))
sns.scatterplot(x='YearsExperience', y='Salary', data=df, color='blue')
plt.title('Years of Experience vs. Salary')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.grid(True)
plt.show()

# Step 6:🧹 Handle Missing Values (if any)
print("\n🔎 Missing values per column:\n", df.isnull().sum())
df.dropna(inplace=True)

# Step 7:📈 Correlation Heatmap
numeric = df.select_dtypes(include=[np.number])
corr = numeric.corr()
plt.figure(figsize=(6, 4))
sns.heatmap(corr, annot=True, cmap='coolwarm')
plt.title("Correlation Matrix")
plt.show()

# Step 8:📊 Pairplot to View Relationships
sns.pairplot(numeric)
plt.show()

# Step 9:🎯 Prepare Data
X = df[['YearsExperience']]
y = df['Salary']

# Step 10:🧪 Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42)

# Step 11:🤖 Train Linear Regression Model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 12:🧮 Predictions & Evaluation
y_pred = model.predict(X_test)
print("\n📌 Model Performance")
print("Intercept:", round(model.intercept_, 2))
print("Coefficient:", round(model.coef_[0], 2))
print("R² Score:", round(r2_score(y_test, y_pred), 4))
print("MSE:", round(mean_squared_error(y_test, y_pred), 2))

# Step 13: Plot Regression Line
plt.figure(figsize=(8,6))
sns.scatterplot(x='YearsExperience', y='Salary', data=df, label='Actual')
plt.plot(X, model.predict(X), color='red', label='Regression Line')
plt.title('Regression Line Fit')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.legend()
plt.grid(True)
plt.show()

# Step 14:📉 Plot Regression Line with Error Bands
plt.figure(figsize=(8, 5))
plt.scatter(X_test, y_test, label='Actual', alpha=0.7)
plt.plot(X_test, y_pred, color='red', label='Regression Line')
plt.fill_between(
    X_test.squeeze(),
    y_pred - np.std(y_test - y_pred),
    y_pred + np.std(y_test - y_pred),
    color='gray',
    alpha=0.2,
    label='Error Band'
)
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.title('Linear Regression Fit with Error Band')
plt.legend()
plt.grid(True)
plt.show()

# Step 15:📊 Compare Predictions with Actual using Bar Plot
comparison_df = pd.DataFrame({'Actual': y_test.values, 'Predicted': y_pred})
comparison_df.reset_index(drop=True, inplace=True)
comparison_df.plot(kind='bar', figsize=(10, 6), color=['skyblue', 'orange'])
plt.title('Actual vs Predicted Salaries')
plt.xlabel('Test Sample Index')
plt.ylabel('Salary')
plt.grid(True)
plt.tight_layout()
plt.show()

# Step 16:🔮 User Input for Custom Prediction
def predict_salary():
    try:
        years = float(input("🔍 Enter years of experience: "))
        prediction = model.predict([[years]])
        print(f"💰 Predicted Salary for {years} years of experience: ${prediction[0]:,.2f}")
    except:
        print("❌ Invalid input. Please enter a valid number.")
