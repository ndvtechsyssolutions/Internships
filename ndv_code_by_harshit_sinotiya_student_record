import json
import os
from tabulate import tabulate

DATA_FILE = "students.json"


class Student:
    def __init__(self, student_id, name, branch, year, marks):
        self.student_id = student_id
        self.name = name
        self.branch = branch
        self.year = year
        self.marks = marks

    def to_dict(self):
        return {
            "student_id": self.student_id,
            "name": self.name,
            "branch": self.branch,
            "year": self.year,
            "marks": self.marks,
        }


class StudentManager:
    def __init__(self):
        self.students = self.load_data()

    def load_data(self):
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'r') as f:
                return json.load(f)
        return []

    def save_data(self):
        with open(DATA_FILE, 'w') as f:
            json.dump(self.students, f, indent=4)

    def add_student(self, student):
        self.students.append(student.to_dict())
        self.save_data()

    def view_students(self):
        if not self.students:
            print("No student records found.")
        else:
            print(tabulate(self.students, headers="keys", tablefmt="grid"))

    def update_student(self, student_id):
        for student in self.students:
            if student["student_id"] == student_id:
                print("Enter new details (leave blank to keep current value):")
                new_student_id=input(f"student[{student['student_id']}]:")
                name = input(f"Name [{student['name']}]: ") 
                branch = input(f"Branch [{student['branch']}]: ") 
                year = input(f"Year [{student['year']}]: ") 
                marks = input(f"Marks [{student['marks']}]: ") 

                student.update({"student_id": new_student_id,
                                "name": name,
                                "branch": branch, 
                                "year": year,
                                "marks": marks})
                self.save_data()
                print("Student record updated.")
                return
        print("Student ID not found.")

    def delete_student(self, student_id):
        for student in self.students:
            if student["student_id"] == student_id:
                self.students.remove(student)
                self.save_data()
                print("Student record deleted.")
                return
        print("Student ID not found.")


def main():
    manager = StudentManager()
    while True:
        print("\n=== Student Record Management ===")
        print("1. Add Student")
        print("2. View All Students")
        print("3. Update Student")
        print("4. Delete Student")
        print("5. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            student_id = input("Enter Student ID: ")
            name = input("Enter Name: ")
            branch = input("Enter Branch: ")
            year = input("Enter Year: ")
            marks = input("Enter Marks: ")
            student = Student(student_id, name, branch, year, marks)
            manager.add_student(student)
            print("Student added successfully.")

        elif choice == '2':
            manager.view_students()

        elif choice == '3':
            student_id = input("Enter Student ID to update: ")
            manager.update_student(student_id)

        elif choice == '4':
            student_id = input("Enter Student ID to delete: ")
            manager.delete_student(student_id)

        elif choice == '5':
            print("exit")
            break

        else:
            print("Invalid choice. Please try again.")


if __name__ == "__main__":
    main()
