# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1liPgePRMqAoByJmtq_giXthFhhnyiETu
"""

# Upload and Load Data
from google.colab import files
uploaded = files.upload()

import pandas as pd

# Load the correct sheet and preview
xls = pd.ExcelFile("Bank_Personal_Loan_Modelling.xlsx")
print(xls.sheet_names)  # See available sheets

# Load the correct sheet (change if needed)
df_loan = pd.read_excel(xls, sheet_name='Data')  # Replace 'Data' with actual sheet name if different
df_loan.dropna(inplace=True)
print(df_loan.head())

# Drop unnecessary columns (like ID, ZIP, etc.)
df_loan.drop(columns=['ID', 'ZIP Code'], inplace=True)

# Encode categorical variables
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
categorical_cols = ['Education', 'Family', 'Securities Account', 'CD Account', 'Online', 'CreditCard']
for col in categorical_cols:
    df_loan[col] = le.fit_transform(df_loan[col])

# Define features and target
X_loan = df_loan.drop('Personal Loan', axis=1)
y_loan = df_loan['Personal Loan']

# Scale features
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_loan_scaled = scaler.fit_transform(X_loan)

# Train-Test Split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_loan_scaled, y_loan, test_size=0.2, random_state=42)

# Model Training
from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)
y_prob = model.predict_proba(X_test)[:, 1]

# Evaluation
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, roc_curve, auc
import matplotlib.pyplot as plt
import seaborn as sns

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
fpr, tpr, _ = roc_curve(y_test, y_prob)
roc_auc = auc(fpr, tpr)

# Side-by-side Plots with Gap
fig, axes = plt.subplots(1, 2, figsize=(14, 6))

# Confusion Matrix
sns.heatmap(cm, annot=True, fmt='d', cmap='magma', ax=axes[0])
axes[0].set_title('Confusion Matrix - Logistic Regression')
axes[0].set_xlabel('Predicted')
axes[0].set_ylabel('Actual')

# ROC Curve
axes[1].plot(fpr, tpr, color='blue', lw=2, label='AUC = %0.2f' % roc_auc)
axes[1].plot([0, 1], [0, 1], color='gray', linestyle='--')
axes[1].set_title('ROC Curve - Logistic Regression')
axes[1].set_xlabel('False Positive Rate')
axes[1].set_ylabel('True Positive Rate')
axes[1].legend(loc='lower right')

plt.tight_layout()
plt.show()