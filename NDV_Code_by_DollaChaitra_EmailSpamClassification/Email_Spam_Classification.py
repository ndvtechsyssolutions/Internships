# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1liPgePRMqAoByJmtq_giXthFhhnyiETu
"""

from google.colab import files
uploaded = files.upload()
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import (
    accuracy_score, precision_score, recall_score, f1_score,
    confusion_matrix, classification_report, RocCurveDisplay
)
import warnings
warnings.filterwarnings('ignore')
try:
    df_email = pd.read_csv("spam.csv", encoding='latin-1')[['v1', 'v2']]
    df_email.columns = ['label', 'message']

    # Encode target
    df_email['label'] = LabelEncoder().fit_transform(df_email['label'])

    # TF-IDF Vectorizer for text
    tfidf = TfidfVectorizer(stop_words='english')
    X_email = tfidf.fit_transform(df_email['message'])
    y_email = df_email['label']

    # Train-test split
    X_train, X_test, y_train, y_test = train_test_split(X_email, y_email, test_size=0.2, random_state=42)

    models_email = {
        'Logistic Regression': LogisticRegression(),
        'Random Forest': RandomForestClassifier()
    }

    print("\nEMAIL SPAM CLASSIFICATION RESULTS:")
    for name, model in models_email.items():
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        print(f"\nModel: {name}")
        print(classification_report(y_test, y_pred))

        # Display Confusion Matrix and ROC Curve side-by-side
        fig, axs = plt.subplots(1, 2, figsize=(14, 5))

        # Confusion Matrix
        cm = confusion_matrix(y_test, y_pred)
        sns.heatmap(cm, annot=True, fmt='d', ax=axs[0], cmap='magma')
        axs[0].set_title(f"Confusion Matrix - {name}")
        axs[0].set_xlabel("Predicted")
        axs[0].set_ylabel("Actual")

        # ROC Curve
        RocCurveDisplay.from_estimator(model, X_test, y_test, ax=axs[1])
        axs[1].set_title(f"ROC Curve - {name}")

        plt.tight_layout()
        plt.show()

except Exception as e:
    print("Skipping email classification. Error:", e)
